globals:
  - id: ev_factor
    type: float
    restore_value: yes
    initial_value: '3.4'
  - id: ev_range
    type: float

binary_sensor:
  - platform: homeassistant
    id: ioniq_ev_16_19_ev_battery_charge
    entity_id: binary_sensor.ioniq_ev_16_19_ev_battery_charge
#    on_state:
#      then:
#        - if:
#            condition:
#              binary_sensor.is_on: ioniq_ev_16_19_ev_battery_charge
#            then:
#              - lvgl.label.update:
#                  id: car3
#                  text:
#                    format: "$mdi_car_clock  %.0f min"
#                    args: [ 'id(ioniq_ev_16_19_estimated_station_charge_duration).state' ]
#            else:
#              - lvgl.label.update:
#                  id: car3
#                  text: " "

  - platform: homeassistant
    id: ioniq_ev_16_19_ev_battery_plug
    entity_id: binary_sensor.ioniq_ev_16_19_ev_battery_plug
    on_state:
      then:
        - if:
            condition:
              and:
              - binary_sensor.is_on: ioniq_ev_16_19_ev_battery_plug
              - binary_sensor.is_off: ioniq_ev_16_19_ev_battery_charge
            then:
              - lambda: notif_set_text("car.battery_charge.icon", "$mdi_ev_plug_type2");
            else:
              - lambda: notif_set_text("car.battery_charge.icon", "$mdi_car_clock");

  - platform: homeassistant
    id: ioniq_ev_16_19_door_lock
    entity_id: lock.ioniq_ev_16_19_door_lock
    on_state:
      then:
        - if:
            condition:
              - binary_sensor.is_on: ioniq_ev_16_19_door_lock
            then:
              - lvgl.label.update:
                    id: car_lock
                    text: Türen geschlossen
              - lvgl.label.update:
                    id: car_locki
                    text: $mdi_car_door_lock
              - lvgl.label.update:
                    id: car_lockb
                    text: Öffnen
            else:
              - lvgl.label.update:
                    id: car_lock
                    text: Türen offen
              - lvgl.label.update:
                    id: car_locki
                    text: $mdi_car_door_lock_open
              - lvgl.label.update:
                    id: car_lockb
                    text: Schließen

text_sensor:
  - platform: homeassistant
    id: ioniq_ev_16_19_last_updated_at
    entity_id: sensor.ioniq_ev_16_19_last_updated_at
    device_class: timestamp
    on_value:
      then:
        - lvgl.label.update:
            id: page_car8t
            text: !lambda |-
                char str[19];
                struct tm updateTime;
                strptime(id(ioniq_ev_16_19_last_updated_at).state.c_str(), "%Y-%m-%dT%H:%M:%S+00:00", &updateTime);
                strftime(str, sizeof(str), "%H:%M.%S %d.%m.%y", &updateTime);
                return  { str };

sensor:
  - platform: homeassistant
    id: ioniq_ev_16_19_ev_battery_level
    entity_id: sensor.ioniq_ev_16_19_ev_battery_level
    on_value:
      then:
        - lambda: |-
              if (id(ioniq_ev_16_19_ev_range).state > 0) {
                id(ev_range) = id(ioniq_ev_16_19_ev_range).state;
                id(ev_factor) = id(ioniq_ev_16_19_ev_range).state / id(ioniq_ev_16_19_ev_battery_level).state;
              } else {
                id(ev_range) = id(ioniq_ev_16_19_ev_battery_level).state * id(ev_factor);
              }
        - lambda: notif_set("car.battery_level", "Ladestand", "$mdi_car_battery", string_format("%.0f%%", x));
        - if:
            condition:
              sensor.in_range:
                id: ioniq_ev_16_19_ev_battery_level
                below: 30
            then:
              - lambda: |-
                  warn_set("car.battery_level", string_format("%.0f%%", x), "$mdi_car_battery", 8);
                  notif_set_color("car.battery_level", red);
            else:
              - lambda: |-
                  warn_clear("car.battery_level");
                  notif_set_color("car.battery_level", white);

  - platform: homeassistant
    id: ioniq_ev_16_19_ev_range
    entity_id: sensor.ioniq_ev_16_19_ev_range
    on_value:
      then:
        - lambda: |-
            if ((id(ioniq_ev_16_19_ev_range).state != 0) && (id(ioniq_ev_16_19_ev_battery_level).state != 0))
              id(ev_factor) = id(ioniq_ev_16_19_ev_range).state / id(ioniq_ev_16_19_ev_battery_level).state;
              if (id(ioniq_ev_16_19_ev_range).state > 0)
                id(ev_range) = id(ioniq_ev_16_19_ev_range).state;
              else
                id(ev_range) = id(ioniq_ev_16_19_ev_battery_level).state * id(ev_factor);
        - logger.log: 
            format: 'EV factor: %.2f'
            args: [ 'id(ev_factor)' ]
        - lambda: notif_set("car.ev_range", "Reichweite", "$mdi_ev_station", string_format("%.0f km", id(ev_range)));

  - platform: homeassistant
    id: ioniq_ev_16_19_estimated_station_charge_duration
    entity_id: sensor.ioniq_ev_16_19_estimated_station_charge_duration
    on_value:
      then:
        - lambda: notif_set_text("car.battery_charge.name", "Ladezeit");
        - if:
            condition:
              binary_sensor.is_on: ioniq_ev_16_19_ev_battery_charge
            then:
              - lambda: notif_set_text("car.battery_charge", string_format("%.0f min", x));
            else:
              - lambda: notif_set_text("car.battery_charge", "-");

  - platform: homeassistant
    id: myenergi_zappi_16097935_charge_added_session
    entity_id: sensor.myenergi_zappi_16097935_charge_added_session
    on_value:
      then:
        - lambda: notif_set("car.charge_added_session", "Wallbox", "$mdi_ev_station", string_format("%.1f kWh", x));

switch:
  - platform: homeassistant
    name: "Türschloss"
    id: ioniq_door_lock
    entity_id: switch.ioniq_door_lock

number:
  - platform: homeassistant
    id: ioniq_ev_16_19_dc_charging_limit
    entity_id: number.ioniq_ev_16_19_dc_charging_limit
    on_value:
      - lvgl.slider.update:
          id: slider_dc_charging
          value: !lambda return (x / 10);
      - lvgl.label.update:
          id: dc_charging
          text:
            format: "DC-Ladelimit (%.0f%%)"
            args: [ 'x' ]

  - platform: homeassistant
    id: ioniq_ev_16_19_ac_charging_limit
    entity_id: number.ioniq_ev_16_19_ac_charging_limit
    on_value:
      - lvgl.slider.update:
          id: slider_ac_charging
          value: !lambda return (x / 10);
      - lvgl.label.update:
          id: ac_charging
          text:
            format: "AC-Ladelimit (%.0f%%)"
            args: [ 'x' ]
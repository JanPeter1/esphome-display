debug:
  update_interval: 60s

text_sensor:
  - platform: debug
    device:
      name: "Device Info"
      on_value:
        # '2024.12.2|Chip: ESP32-S3 Features:WIFI_BGN,BLE, Cores:2 Revision:2|ESP-IDF: 5.1.5|EFuse MAC: F0:F5:BD:4B:95:B0|Reset: Software Reset Digital Core|Wakeup: Unknown'
        then: !
          lambda: |-
            std::string txt(x);
            int pos;
            // ESPHome version
            notif_set_text("debug_version_name", "ESPHome");
            pos = txt.find('|');
            notif_set_text("debug_version_text", txt.substr(0, pos));
            txt = txt.substr(pos+1);

            // Chip
            pos = txt.find(":");
            notif_set_text("debug_chip_name", txt.substr(0, pos));
            txt = txt.substr(pos+2);
            pos = txt.find(' ');
            notif_set_text("debug_chip_text", txt.substr(0, pos));
            txt = txt.substr(pos+1);

            // Features
            pos = txt.find(':');
            notif_set_text("debug_features_name", txt.substr(0, pos));
            txt = txt.substr(pos+1);
            pos = txt.find(", ");
            notif_set_text("debug_features_text", txt.substr(0, pos));
            txt = txt.substr(pos+2);

            // Cores and Revision
            pos = txt.find(':');
            notif_set_text("debug_cores_name", txt.substr(0, pos));
            txt = txt.substr(pos+1);
            pos = txt.find('|');
            notif_set_text("debug_cores_text", txt.substr(0, pos));
            txt = txt.substr(pos+1);

            // ESP-IDF
            pos = txt.find(':');
            notif_set_text("debug_idf_name", txt.substr(0, pos));
            txt = txt.substr(pos+2);
            pos = txt.find('|');
            notif_set_text("debug_idf_text", txt.substr(0, pos));
            txt = txt.substr(pos+1);

            // skip EFuse MAC
            pos = txt.find('|');
            txt = txt.substr(pos+1);

            // Reset reason
            pos = txt.find(':');
            notif_set_text("debug_reset_name", txt.substr(0, pos));
            txt = txt.substr(pos+2);
            pos = txt.find('|');
            notif_set_text("debug_reset_text", txt.substr(0, pos));
            txt = txt.substr(pos+1);

            // Wakeup reason
            pos = txt.find(':');
            notif_set_text("debug_wakeup_name", txt.substr(0, pos));
            txt = txt.substr(pos+2);
            pos = txt.find('|');
            notif_set_text("debug_wakeup_text", txt.substr(0, pos));


#    reset_reason:
#      name: "Reset Reason"

sensor:
  - platform: debug
    free:
      name: "Heap Free"
      on_value:
        - lambda: |- 
            notif_set_text("debug_heap_name", "Heap frei");
            notif_set_text("debug_heap_text", string_format("%.0f kB", x / 1024));

#    fragmentation:
#      name: "Heap Fragmentation"
#    block:
#      name: "Heap Max Block"
#    loop_time:
#      name: "Loop Time"
    psram:
      name: "Free PSRAM"
      on_value:
        - lambda: |-
            notif_set_text("debug_psram_name", "PSRAM frei");
            notif_set_text("debug_psram_text", string_format("%.0f kB", x / 1024));

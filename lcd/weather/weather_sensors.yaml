esphome:
  includes:
    - common/my_utils.hpp

sensor:
  - platform: homeassistant
    id: weather_humidity
    name: Luftfeuchtigkeit
    entity_id: weather.forecast_home
    attribute: humidity
    on_value:
      then:
        - lambda: notif_set("weather_humidity", "Luftfeuchtigkeit", "$mdi_water_percent", string_format("%.0f%%", x));

  - platform: homeassistant
    id: weather_cloud_coverage
    name: Bewölkungsgrad
    entity_id: weather.forecast_home
    attribute: cloud_coverage
    on_value:
      then:
        - lambda: notif_set("weather_cloudcoverage", "Bewölkung", "$mdi_weather_cloudy", string_format("%.0f%%", x));

  - platform: homeassistant
    id: weather_uv
    entity_id: weather.forecast_home
    name: "UV Index"
    attribute: uv_index
    on_value:
      then:
        - lambda: notif_set("weather_uvindex", "UV Index", "$mdi_sun_shield_outline", string_format("%.1f", x));
        - if:
            condition:
              sensor.in_range:
                id: weather_uv
                below: 3
            then:
              - lambda: |-
                  notif_set_color("weather_uvindex", white);
                  warn_clear("weather_uvindex");
        - if:
            condition:
              sensor.in_range:
                id: weather_uv
                above: 3
                below: 5
            then:
              - lambda: |-
                  notif_set_color("weather_uvindex", yellow);
                  warn_set("weather_uvindex", string_format("UV Index: %.1f", x), "$mdi_sun_shield_outline", 4);
        - if:
            condition:
              sensor.in_range:
                id: weather_uv
                above: 5
            then:
              - lambda: |-
                  notif_set_color("weather_uvindex", red);
                  warn_set("weather_uvindex", string_format("UV Index: %.1f", x), "$mdi_sun_shield_outline", 7);

  - platform: homeassistant
    id: weather_pressure
    entity_id: weather.forecast_home
    name: "Luftdruck"
    attribute: pressure
    on_value:
      - then:
        - lambda: notif_set("weather_pressure", "Luftdruck", "$mdi_cloud_cog_outline", string_format("%.0f hPa", x));
        - if:
            condition:
              sensor.in_range:
                id: weather_pressure
                below: 1010
            then:
              - lambda: notif_set_text("weather_pressure_icon", "$mdi_cloud_arrow_down_outline");
        - if:
            condition:
              sensor.in_range:
                id: weather_pressure
                above: 1010.01
                below: 1020
            then:
              - lambda: notif_set_text("weather_pressure_icon", "$mdi_cloud_cog_outline");
        - if:
            condition:
              sensor.in_range:
                id: weather_pressure
                above: 1020.01
            then:
              - lambda: notif_set_text("weather_pressure_icon", "$mdi_cloud_arrow_up_outline");

  - platform: homeassistant
    id: weather_dew_point
    name: Taupunkt
    entity_id: weather.forecast_home
    attribute: dew_point
    on_value:
      then:
        - lambda: notif_set("weather_dewpoint", "Taupunkt", "$mdi_thermometer_water", string_format("%.0f °C", x));

  - platform: homeassistant
    id: weather_wind_speed
    name: Windgeschwindigkeit
    entity_id: weather.forecast_home
    attribute: wind_speed
    on_value:
      then:
        - lambda: notif_set("weather_windspeed", "Windgeschw.", "$mdi_wind", string_format("%.0f km/h", x));
        - if:
            condition:
              sensor.in_range:
                id: weather_wind_speed
                above: 50.01
                below: 88
            then:
              - lambda: notif_set_color("weather_windspeed", yellow);
        - if:
            condition:
              sensor.in_range:
                id: weather_wind_speed
                above: 88.01
            then:
              - lambda: notif_set_color("weather_windspeed", red);
        - if:
            condition:
              sensor.in_range:
                id: weather_wind_speed
                below: 50
            then:
              - lambda: notif_set_color("weather_windspeed", white);

  - platform: homeassistant
    id: weather_wind_bearing
    name: Taupunkt
    entity_id: weather.forecast_home
    attribute: wind_bearing
    on_value_range:
      - above: 0
        below: 22.5
        then:
          - lambda: notif_set("weather_windbearing", "Windrichtung", "$mdi_arrow_down_thin_circle_outline", string_format("N (%.0f°)", x));
      - above: 22.5
        below: 67.5
        then:
          - lambda: notif_set("weather_windbearing", "Windrichtung", "$mdi_arrow_bottom_left_thin_circle_outline", string_format("NO (%.0f°)", x));
      - above: 67.5
        below: 112.5
        then:
          - lambda: notif_set("weather_windbearing", "Windrichtung", "$mdi_arrow_left_thin_circle_outline", string_format("O (%.0f°)", x));
      - above: 112.5
        below: 157.5
        then:
          - lambda: notif_set("weather_windbearing", "Windrichtung", "$mdi_arrow_top_left_thin_circle_outline", string_format("SO (%.0f°)", x));
      - above: 157.5
        below: 202.5
        then:
          - lambda: notif_set("weather_windbearing", "Windrichtung", "$mdi_arrow_up_thin_circle_outline", string_format("S (%.0f°)", x));
      - above: 202.5
        below: 247.5
        then:
          - lambda: notif_set("weather_windbearing", "Windrichtung", "$mdi_arrow_top_right_thin_circle_outline", string_format("SW (%.0f°)", x));
      - above: 247.5
        below: 292.5
        then:
          - lambda: notif_set("weather_windbearing", "Windrichtung", "$mdi_arrow_right_thin_circle_outline", string_format("W (%.0f°)", x));
      - above: 292.5
        below: 337.5
        then:
          - lambda: notif_set("weather_windbearing", "Windrichtung", "$mdi_arrow_bottom_right_thin_circle_outline", string_format("NW (%.0f°)", x));
      - above: 337.5
        then:
          - lambda: notif_set("weather_windbearing", "Windrichtung", "$mdi_arrow_down_thin_circle_outline", string_format("N (%.0f°)", x));

text_sensor:
  - platform: homeassistant
    id: weather_temperature
    name: Temperatur
    entity_id: weather.forecast_home
    attribute: temperature
    on_value:
      then:
        - lambda: notif_set("weather_temperature", "Temperatur", "$mdi_thermometer", string_format("%s °C", id(weather_temperature).state.c_str()));

  - platform: homeassistant
    id: weather_condition
    name: Wetter
    entity_id: weather.forecast_home
    filters:
      - map:
        - sunny -> $mdi_weather_sunny Sonnig
        - clear-day -> $mdi_weather_sunny Klar
        - clear-night -> $mdi_weather_clear_night Klare Nacht
        - cloudy -> $mdi_weather_cloudy Bewölkt
        - rainy -> $mdi_weather_rainy Regen
        - sleet -> $mdi_weather_snow_rain Schneeregen
        - snow -> $mdi_weather_snow Schnee
        - wind -> $mdi_weather_windy Windig
        - fog -> $mdi_weather_fog Nebel
        - partlycloudy -> $mdi_weather_partly_cloudy Teilweise Bewölkt
    on_value:
      then:
        - lambda: notif_set("weather_condition", "Wetter", x.substr(0, x.find(" ")), x.substr(x.find(" ") + 1));

  - platform: homeassistant
    id: daily_forecast
    name: Temperaturvorschau
    entity_id: sensor.daily_forecast
    on_value:
      then:
        - lambda: |-
            static std::map<std::string, std::string> daymapping = {{"Mon", "Mo"}, {"Tue", "Di"}, {"Wed", "Mi"}, {"Thu", "Do"}, {"Fri", "Fr"}, {"Sat", "Sa"}, {"Sun", "So"}};
            static lv_obj_t * ldays[] =  { fc0_day, fc1_day, fc2_day, fc3_day, fc4_day };
            static lv_obj_t * ltemps[] = { fc0_temp, fc1_temp, fc2_temp, fc3_temp, fc4_temp };
            static lv_obj_t * ltempslow[] = { fc0_templow, fc1_templow, fc2_templow, fc3_templow, fc4_templow };
            static lv_obj_t * lrains[] = { fc0_rain, fc1_rain, fc2_rain, fc3_rain, fc4_rain };
            static lv_obj_t * lsyms[] =  { fc0_sym, fc1_sym, fc2_sym, fc3_sym, fc4_sym };
            // correct would be starting at 20 and ending at 220
            static lv_point_t mlv_point_t_id[] = {{0, 75}, {70, 75}, {120, 75}, {170, 75}, {242, 75}};
            static lv_point_t mlv_pointlow_t_id[] = {{0, 75}, {70, 75}, {120, 75}, {170, 75}, {242, 75}};

            auto forecast = split_trim(x, "#");
            auto cnt = 0;
            for (auto part: forecast) {
              //ESP_LOGD("main", part.c_str());
              std::vector<std::string> parts = split_trim(part, ";");
              if (parts.size() < 4) {
                ESP_LOGD("main", (std::string("Wrong format: ") + trim(part)).c_str());
                continue;
              }
              auto day = GetWithDef(daymapping, parts[0], parts[0]);
              lv_label_set_text(ldays[cnt], day.c_str());

              auto templow = StringToFloat(parts[1]);
              auto temp = StringToFloat(parts[2]);
              auto rain = StringToFloat(parts[3]);
              mlv_point_t_id[cnt].y    = (lv_coord_t)(75 - 2.3 * temp);
              mlv_pointlow_t_id[cnt].y = (lv_coord_t)(75 - 2.3 * templow);
              lv_label_set_text(ltempslow[cnt], str_sprintf("%.1f°", templow).c_str());

              lv_label_set_text(ltemps[cnt], str_sprintf("%.1f°", temp).c_str());
              lv_label_set_text(lrains[cnt], str_sprintf("%.0fmm", rain).c_str());
              lv_label_set_text(lsyms[cnt],  parts[4].c_str());
              cnt++;
              if (cnt > 4) break;
            }
            lv_line_set_points(temp_line->obj, mlv_point_t_id, 5);
            lv_line_set_points(templow_line->obj, mlv_pointlow_t_id, 5);

  - platform: homeassistant
    id: hourly_forecast
    name: Temperaturheute
    entity_id: sensor.hourly_forecast
    on_value:
      then:
        - lambda: |-
            static lv_point_t mlv_pointhour_t_id[] = {{00, 75},  {20, 75},  {30, 75},  {40, 75},  {50, 75},
                                                      {60, 75},  {70, 75},  {80, 75},  {90, 75},  {100, 75},
                                                      {110, 75}, {120, 75}, {130, 75}, {140, 75}, {150, 75},
                                                      {160, 75}, {170, 75}, {180, 75}, {190, 75}, {200, 75},
                                                      {210, 75}, {220, 75}, {230, 75}, {242, 75}};

            auto forecast = split_trim(x, "#");
            auto cnt = 0;
            for (auto part: forecast) {
              //ESP_LOGD("main", part.c_str());
              std::vector<std::string> parts = split_trim(part, ";");
              if (parts.size() < 2) {
                ESP_LOGD("main", (std::string("Wrong format: ") + trim(part)).c_str());
                continue;
              }

              mlv_pointhour_t_id[cnt].y = (lv_coord_t)(75 - 2.3 * StringToFloat(parts[1]));
              switch(cnt) {
              case 0:
                lv_label_set_text(fc0_hour, (parts[0] + ":00").c_str());
                break;

              case 6:
                lv_label_set_text(fc1_hour, (parts[0] + ":00").c_str());
                break;

              case 12:
                lv_label_set_text(fc2_hour, (parts[0] + ":00").c_str());
                break;

              case 18:
                lv_label_set_text(fc3_hour, (parts[0] + ":00").c_str());
                break;

              case 23:
                lv_label_set_text(fc4_hour, (parts[0] + ":00").c_str());
                break;

              default:
                break;
              }
              cnt++;
              if (cnt > 23) break;
            }
            lv_line_set_points(temphour_line->obj, mlv_pointhour_t_id, 24);

  - platform: homeassistant
    id: wetterwarnungen
    name: Wetterwarnungen
    entity_id: sensor.wetterwarnungen
    on_value:
      then:
        - lambda: |-
            static lv_obj_t * lab[] =  { warnings_t1, warnings_t2, warnings_t3, warnings_t4, warnings_t5, warnings_t6, warnings_t7 };
            auto texts = split(x, "|");
            int cnt = 0;
            warn_clear("weather.warning");
            for (auto part: texts) {
              ESP_LOGD("main", part.c_str());
              if (cnt == 0) {
                lv_label_set_text(lab[cnt], trim(part).c_str());
              } else {
                auto parts = split(part, ";");
                if (parts.size() < 4) {
                  ESP_LOGD("main", (std::string("Message should have 4 parts: ") + part).c_str());
                  continue;
                }
                lv_label_set_text(lab[cnt], (trim(parts[0]) + " " + parts[1] + "#\n" + parts[2] + "\n" + parts[3]).c_str());
                //auto col = strtoul(trim(parts[0]).substr(1).c_str(), NULL, 16);
                //lv_obj_set_style_text_color(lab[cnt], lv_color_make(col >> 16, (col >> 8) & 0xFF, col & 0xFF), LV_PART_MAIN);
                //cnt++;
                //lv_label_set_text(lab[cnt], (parts[2] + "\n" + parts[3]).c_str());
                std::string icon(" ");
                int level = StringToInt(parts[4]);
                switch (level) {
                case 0:
                case 1:
                  icon = "\U000F0590";  // $mdi_weather_cloudy
                  break;

                case 2:
                  icon = "\U000F0F2F";  // mdi_weather_cloudy_alert
                  break;

                case 3:
                case 4:
                  icon = "\U000F002A";  // $mdi_alert
                  break;

                default:
                  break;
                }
                auto msgtext = parts[1];
                if (startsWith(msgtext, "Amtliche WARNUNG vor ")) msgtext = std::string("Warnung: ") + msgtext.substr(21);
                if (level > 2) {
                  warn_add("weather.warning", msgtext, icon, 10);
                } else if (level > 0) {
                  warn_add("weather.warning", msgtext, icon, 5);
                }
              }
              cnt++;
              if (cnt > 7) break;
            }

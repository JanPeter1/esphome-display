globals:
  - id: ev_factor
    type: float
    restore_value: yes
    initial_value: '3.4'
  - id: ev_range
    type: float

binary_sensor:
  - platform: homeassistant
    id: ioniq_ev_16_19_ev_battery_charge
    entity_id: binary_sensor.ioniq_ev_16_19_ev_battery_charge
#    on_state:
#      then:
#        - if:
#            condition:
#              binary_sensor.is_on: ioniq_ev_16_19_ev_battery_charge
#            then:
#              - lvgl.label.update:
#                  id: car3
#                  text:
#                    format: "$mdi_car_clock  %.0f min"
#                    args: [ 'id(ioniq_ev_16_19_estimated_station_charge_duration).state' ]
#            else:
#              - lvgl.label.update:
#                  id: car3
#                  text: " "

  - platform: homeassistant
    id: ioniq_ev_16_19_ev_battery_plug
    entity_id: binary_sensor.ioniq_ev_16_19_ev_battery_plug
    on_state:
      then:
        - if:
            condition:
              and:
              - binary_sensor.is_on: ioniq_ev_16_19_ev_battery_plug
              - binary_sensor.is_off: ioniq_ev_16_19_ev_battery_charge
            then:
              - lvgl.label.update:
                  id: page_car3i
                  text: "$mdi_ev_plug_type2"
            else:
              - lvgl.label.update:
                  id: page_car3i
                  text: "$mdi_car_clock"

  - platform: homeassistant
    id: ioniq_ev_16_19_door_lock
    entity_id: lock.ioniq_ev_16_19_door_lock
    on_state:
      then:
        - if:
            condition:
              - binary_sensor.is_on: ioniq_ev_16_19_door_lock
            then:
#              - lvgl.label.update:
#                    id: car_lock
#                    text: Abgeschlossen
              - lvgl.label.update:
                    id: car_locki
                    text: $mdi_car_door_lock
              - lvgl.label.update:
                    id: car_lockb
                    text: Öffnen
            else:
#              - lvgl.label.update:
#                    id: car_lock
#                    text: Offen
              - lvgl.label.update:
                    id: car_locki
                    text: $mdi_car_door_lock_open
              - lvgl.label.update:
                    id: car_lockb
                    text: Schließen

text_sensor:
  - platform: homeassistant
    id: ioniq_ev_16_19_last_updated_at
    entity_id: sensor.ioniq_ev_16_19_last_updated_at
    device_class: timestamp
    on_value:
      then:
        - lvgl.label.update:
            id: page_car8t
            text: !lambda |-
                char str[19];
                struct tm updateTime;
                strptime(id(ioniq_ev_16_19_last_updated_at).state.c_str(), "%Y-%m-%dT%H:%M:%S+00:00", &updateTime);
                strftime(str, sizeof(str), "%H:%M.%S %d.%m.%y", &updateTime);
                return  { str };

sensor:
  - platform: homeassistant
    id: ioniq_ev_16_19_ev_battery_level
    entity_id: sensor.ioniq_ev_16_19_ev_battery_level
    on_value:
      then:
        - lambda: |-
              if (id(ioniq_ev_16_19_ev_range).state > 0) {
                id(ev_range) = id(ioniq_ev_16_19_ev_range).state;
                id(ev_factor) = id(ioniq_ev_16_19_ev_range).state / id(ioniq_ev_16_19_ev_battery_level).state;
              } else {
                id(ev_range) = id(ioniq_ev_16_19_ev_battery_level).state * id(ev_factor);
              }
        - lvgl.label.update:
            id: page_car1
            text:
              format: "%.0f%%"
              args: [ 'x' ]
        - if:
            condition:
              sensor.in_range:
                id: ioniq_ev_16_19_ev_battery_level
                above: 0
                below: 30
            then:
              - lvgl.label.update:
                  id: page_car1
                  text_color: red
            else:
              - lvgl.label.update:
                  id: page_car1
                  text_color: white

  - platform: homeassistant
    id: ioniq_ev_16_19_ev_range
    entity_id: sensor.ioniq_ev_16_19_ev_range
    on_value:
      then:
        - lambda: |-
            if ((id(ioniq_ev_16_19_ev_range).state != 0) && (id(ioniq_ev_16_19_ev_battery_level).state != 0))
              id(ev_factor) = id(ioniq_ev_16_19_ev_range).state / id(ioniq_ev_16_19_ev_battery_level).state;
              if (id(ioniq_ev_16_19_ev_range).state > 0)
                id(ev_range) = id(ioniq_ev_16_19_ev_range).state;
              else
                id(ev_range) = id(ioniq_ev_16_19_ev_battery_level).state * id(ev_factor);
        - logger.log: 
            format: 'EV factor: %.2f'
            args: [ 'id(ev_factor)' ]
        - lvgl.label.update:
            id: page_car2
            text:
              format: "%.0f km"
              args: [ 'id(ev_range)' ]

  - platform: homeassistant
    id: ioniq_ev_16_19_estimated_station_charge_duration
    entity_id: sensor.ioniq_ev_16_19_estimated_station_charge_duration
    on_value:
      then:
        - if:
            condition:
              binary_sensor.is_on: ioniq_ev_16_19_ev_battery_charge
            then:
              - lvgl.label.update:
                  id: page_car3
                  text:
                    format: "%.0f min"
                    args: [ 'x' ]
            else:
              - lvgl.label.update:
                  id: page_car3
                  text: "-"

number:
  - platform: homeassistant
    id: ioniq_ev_16_19_dc_charging_limit
    entity_id: number.ioniq_ev_16_19_dc_charging_limit
    on_value:
      - lvgl.slider.update:
          id: slider_dc_charging
          value: !lambda return (x / 10);
      - lvgl.label.update:
          id: dc_charging
          text:
            format: "DC-Ladelimit (%.0f%%)"
            args: [ 'x' ]

  - platform: homeassistant
    id: ioniq_ev_16_19_ac_charging_limit
    entity_id: number.ioniq_ev_16_19_ac_charging_limit
    on_value:
      - lvgl.slider.update:
          id: slider_ac_charging
          value: !lambda return (x / 10);
      - lvgl.label.update:
          id: ac_charging
          text:
            format: "AC-Ladelimit (%.0f%%)"
            args: [ 'x' ]

image:
  - file: "images/car.png"
    id: image_car
    type: RGB565
    use_transparency: true

lvgl:
  pages:
    - id: car_page
      widgets:
#        - obj:
#            width: 215
#            height: 84
#            x: 565
#            y: 330
#            border_side: NONE
#            bg_color: 0x000000
#            bg_opa: 40%
        - image:
            src: image_car
            x: 520
            y: 320
        - obj:
            width: 420
            height: 280
            x: 20
            y: 150
            border_side: NONE
            pad_all: 10px
            bg_color: black
            bg_opa: 40%
            layout:
              type: grid
              grid_rows: [30px, 30px, 30px, 50px, 30px, 30px, 50px]
              grid_columns: [200px, 40px, 120px]
              grid_row_align: CENTER
              pad_row: 0px
              pad_column: 10px
            widgets:
              - label:
                  <<: !include { file: cell_text.yaml, vars: { row: 0, col: 0, text: "Ladestand"}}
              - label:
                  <<: !include { file: cell_text.yaml, vars: { row: 0, col: 1, text: "$mdi_car_battery"}}
              - label:
                  id: page_car1
                  <<: !include { file: cell_text.yaml, vars: { row: 0, col: 2, text: " "}}

              - label:
                  <<: !include { file: cell_text.yaml, vars: { row: 1, col: 0, text: "Reichweite"}}
              - label:
                  <<: !include { file: cell_text.yaml, vars: { row: 1, col: 1, text: "$mdi_ev_station"}}
              - label:
                  id: page_car2
                  <<: !include { file: cell_text.yaml, vars: { row: 1, col: 2, text: " "}}

              - label:
                  <<: !include { file: cell_text.yaml, vars: { row: 2, col: 0, text: "Ladezeit"}}
              - label:
                  id: page_car3i
                  <<: !include { file: cell_text.yaml, vars: { row: 2, col: 1, text: "$mdi_car_clock"}}
              - label:
                  id: page_car3
                  <<: !include { file: cell_text.yaml, vars: { row: 2, col: 2, text: " "}}

              - label:
                  <<: !include { file: cell_text.yaml, vars: { row: 3, col: 0, text: "Türen"}}
              - label:
                  id: car_locki
                  <<: !include { file: cell_text.yaml, vars: { row: 3, col: 1, text: "$mdi_car_door_lock"}}
              - button:
                  grid_cell_row_pos: 3
                  grid_cell_column_pos: 2
                  height: 30
                  widgets:
                    - label:
                        id: car_lockb
                        align: center
                        text: "Öffnen"
    #                        on_value:
    #                          then:
    #                            - lock.lock: ioniq_ev_16_19_door_lock

              - label:
                  id: dc_charging
                  grid_cell_column_span: 2
                  <<: !include { file: cell_text.yaml, vars: { row: 4, col: 0, text: "DC-Ladelimit"}}
              - slider:
                  grid_cell_row_pos: 4
                  grid_cell_column_pos: 2
                  min_value: 0
                  max_value: 10
                  y: 5
                  width: 120
                  id: slider_dc_charging
                  on_release:
                    - homeassistant.action:
                        action: number.set_value
                        data:
                          entity_id: number.ioniq_ev_16_19_dc_charging_limit
                          value: !lambda return (x * 10);
                    - lvgl.label.update:
                        id: dc_charging
                        text:
                          format: "DC-Ladelimit (%.0f%%)"
                          args: [ x * 10 ]
              - label:
                  id: ac_charging
                  grid_cell_column_span: 2
                  <<: !include { file: cell_text.yaml, vars: { row: 5, col: 0, text: "DC-Ladelimit"}}
              - slider:
                  grid_cell_row_pos: 5
                  grid_cell_column_pos: 2
                  min_value: 0
                  max_value: 10
                  y: 10
                  width: 120
                  id: slider_ac_charging
                  on_release:
                    - homeassistant.action:
                        action: number.set_value
                        data:
                          entity_id: number.ioniq_ev_16_19_ac_charging_limit
                          value: !lambda return (x * 10);
                    - lvgl.label.update:
                        id: ac_charging
                        text:
                          format: "AC-Ladelimit (%.0f%%)"
                          args: [ x * 10 ]

              - label:
                  id: page_car8t
                  <<: !include { file: cell_text.yaml, vars: { row: 6, col: 0, text: "Last update"}}
                  height: 50
              - label:
                  <<: !include { file: cell_text.yaml, vars: { row: 6, col: 1, text: "$mdi_clock_outline"}}
              - button:
                  grid_cell_row_pos: 6
                  grid_cell_column_pos: 2
                  height: 30
                  widgets:
                  - label:
                      align: center
                      text: "update"
                  on_press:
                    then:
                      - homeassistant.action:
                          action: kia_uvo.force_update

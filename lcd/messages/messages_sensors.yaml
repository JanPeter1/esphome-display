esphome:
  includes:
    - lcd/messages/my_messages.hpp

text_sensor:
  - platform: homeassistant
    id: katzenklo_dienst
    name: Katzenklodienst
    entity_id: sensor.katzenklo_dienst
    on_value:
      then:
        - lambda: warn_set("cat.toilet", x, "$mdi_cat", 2);

  - platform: homeassistant
    id: calendar_events
    entity_id: sensor.calendar_events
    attribute: events
    on_value:
      then:
        - lambda: |-
            std::vector<std::string> events;
            int offset = 0;  // offset for 2x time plus one "T"
            std::string date;
            struct tm start_time;
            struct tm end_time;
            time_t current = ::time(NULL);
            struct tm *current_time = localtime(&current);
            static std::vector<lv_obj_t *> levents     =  { messages_t1, messages_t2, messages_t3, messages_t4, messages_t5, messages_t6, messages_t7 };
            static std::vector<lv_obj_t *> leventicons =  { messages_i1, messages_i2, messages_i3, messages_i4, messages_i5, messages_i6, messages_i7 };
            static const char *dayOfWeek[] = { "So", "Mo", "Di", "Mi", "Do", "Fr", "Sa" };

            events = split_trim(x, "#");
            warn_clear("cal.event");
            std::sort(events.begin(), events.end());
            for (int cnt = 0; cnt < std::min(events.size(), levents.size()); cnt++)
            {
              auto text = events[cnt];
              ESP_LOGD("messages", text.c_str());
              if (text.length() < 11) {
                if (text.length() > 0) ESP_LOGD("messages", "time string too short");
                continue;
              }

              start_time = {};
              end_time = {};
              if (text[10] == 'T') {
                // date + time
                offset = 30;
                if (strptime(text.substr(0, 19).c_str(),  "%Y-%m-%dT%H:%M:%S", &start_time) == NULL) { ESP_LOGD("messages", "error parsing start time"); continue; };
                if (strptime(text.substr(26, 19).c_str(), "%Y-%m-%dT%H:%M:%S", &end_time) == NULL)  { ESP_LOGD("messages", "error parsing end time"); continue; };
              } else {
                offset = 0;
                if (strptime(text.substr(0, 10).c_str(),  "%Y-%m-%d", &start_time) == NULL) { ESP_LOGD("messages", "error parsing start date"); continue; };
                if (strptime(text.substr(11, 10).c_str(), "%Y-%m-%d", &end_time) == NULL) { ESP_LOGD("messages", "error parsing end date"); continue; };
              }

              time_t t1 = mktime(&start_time);
              time_t t2 = mktime(&end_time);
              double diffSecs = difftime(t2, t1);          // diff between start time and end time
              double secsFromNow = difftime(t1, current);  // diff until start date
              bool today = false;
              bool tomorrow = false;
              
              if (secsFromNow < 60*60*24) {
                date = "Heute";
                today = true;
              } else if (secsFromNow < 60*60*24*2) {
                date = "Morgen";
                tomorrow = true;
              } else if (secsFromNow < 60*60*24*6) {
                // less than one week - just show the weekday
                date = string_format("%s", dayOfWeek[start_time.tm_wday]);
              } else {
                date = string_format("%s %02D.%02D.", dayOfWeek[start_time.tm_wday], start_time.tm_mday, start_time.tm_mon+1);
              }
              if ((diffSecs == 60*60*24) || (diffSecs == 60*60*24 - 1) || (diffSecs == 60*60*24 - 1 - 60*60)) {
                // leave date as it is
              } else if (diffSecs > 60*60*24) {
                // more than one day
                date = string_format("%02D.%02D. - %02D.%02D", start_time.tm_mday, start_time.tm_mon+1, end_time.tm_mday, end_time.tm_mon+1);
              } else {
                // less that one day
                date += string_format(" %02D:%02D-%02D:%02D", start_time.tm_hour, start_time.tm_min, end_time.tm_hour, end_time.tm_min);
              }
              // 2025-01-08T10:45:00+01:00 2025-01-08T12:00:00+01:00 󰭦 Arzt
              // 2025-01-07 2025-01-11 󱫿 Langer Termin

              ESP_LOGD("messages", date.c_str());
              if (text.length() < 29 + offset) {
                ESP_LOGD("messages", "text too short"); 
                continue;
              }
              auto icon = text.substr(22 + offset, 4);
              auto label = date + " " + text.substr(27 + offset, text.length() - 27 - offset);
              lv_label_set_text(leventicons[cnt], icon.c_str());
              lv_label_set_text(levents[cnt], label.c_str());
              ESP_LOGD("messages", (std::string(date) + " " + text.substr(27 + offset, text.length() - 27 - offset)).c_str());

              int priority = 1;
              if (today) {
                priority = 6;
              } else if (tomorrow) {
                priority = 5;
              } else if (diffSecs < 60*60*24*7) {
                priority = 3;
              } else {
                priority = 1;
              }
              warn_add("cal.event", label, icon, priority);
            }

interval:
  - interval: 10sec
    then:
      - script.execute: update_message_card

script:
  - id: update_message_card
    then:
      - lambda: |-
          ESP_LOGD("messages", "update_message_card");
          static std::vector<lv_obj_t *> lmsg = { label_message_1, label_message_2, label_message_3, label_message_4, label_message_5 };
          static std::vector<lv_obj_t *> licon = { label_message_1i, label_message_2i, label_message_3i, label_message_4i, label_message_5i };
          auto cnt = 0;
          auto msg = warn_get_sorted();
          for (auto dm: msg) {
            ESP_LOGD("messages", "%s(%d): %s", dm.id.c_str(), dm.priority, dm.text.c_str());
            lv_label_set_text(licon[cnt], dm.icon.c_str());
            lv_label_set_text(lmsg[cnt], dm.text.c_str());
            if (dm.priority < 5) {
              lv_obj_set_style_text_color(licon[cnt], white, LV_PART_MAIN);
              lv_obj_set_style_text_color(lmsg[cnt], white, LV_PART_MAIN);
            } else if (dm.priority < 8) {
              lv_obj_set_style_text_color(licon[cnt], yellow, LV_PART_MAIN);
              lv_obj_set_style_text_color(lmsg[cnt], yellow, LV_PART_MAIN);
            } else {
              lv_obj_set_style_text_color(licon[cnt], red, LV_PART_MAIN);
              lv_obj_set_style_text_color(lmsg[cnt], red, LV_PART_MAIN);
            }

            cnt++;
            if (cnt >= lmsg.size()) break;
          }